/***********************************************************************************************//**
 *  Container and manager of activities known or generated by a single Agent.
 *  @class      ActivityHandler
 *  @authors    Carles Araguz (CA), carles.araguz@upc.edu
 *  @date       2018-sep-26
 *  @version    0.1
 *  @copyright  This file is part of a project developed by Nano-Satellite and Payload Laboratory
 *              (NanoSat Lab) at Technical University of Catalonia - UPC BarcelonaTech.
 **************************************************************************************************/

#include "ActivityHandler.hpp"




ActivityHandler::ActivityHandler(Agent* aptr)
    : m_agent(aptr)
    , m_agent_id(aptr->getId())
{ }

std::shared_ptr<Activity> ActivityHandler::getNextActivity(void) const
{
    if(m_activities_own.size() > 0) {
        return m_activities_own.front();
    } else {
        return nullptr;
    }
}

std::shared_ptr<Activity> ActivityHandler::getLastActivity(void) const
{
    if(m_activities_own.size() > 0) {
        return m_activities_own.back();
    } else {
        return nullptr;
    }
}


unsigned int ActivityHandler::count(std::string aid) const
{
    if(aid == m_agent_id) {
        return m_activities_own.size();
    } else {
        auto it = m_activities_others.find(aid);
        if(it != m_activities_others.end()) {
            return m_activities_others.at(aid).size();
        } else {
            return 0;
        }
    }
}
